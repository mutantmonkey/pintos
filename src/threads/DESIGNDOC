			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

James Schwinabart    <jschwina@vt.edu>
Andrew Shugarts	     <rue92@vt.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static struct list alarm_list;
/* This list stores the threads that have called timer_sleep() and will wake up
 * eventually. */

struct thread {
    struct list_elem alarm_elem;
    /* This list_elem stores the thread's position in the alarm_list. */

    uint64_t unblock_ticks;
    /* Ticks at which the process should be unblocked. */
}

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

When a thread calls timer_sleep(), the number of ticks to sleep is checked to
ensure that it is non-negative; if it is, the call is ignored. If it is not,
then the current ticks and the number of ticks to sleep are added and stored in
unblock_ticks, and the thread is appended to alarm_list, then blocked. At each
call of the timer interrupt handler, this list is iterated through and any
thread that has unblock_ticks <= the current number of ticks will be unblocked.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Minimal computation is used in the timer interrupt handler to ensure speed, and
a separate alarm_list is kept to avoid having to iterate through every thread
when the interrupt handler is called.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Because interrupts are disabled, only one thread should be in the critical
section of timer_sleep() at a time.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Interrupts are disabled when a thread is added to the list of waiting threads.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We selected this design because it was the first design we considered. We
believed that it would be a more efficient use of our time to implement the
first design than spend time considering other designs that might require more
careful implementation.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static fp load_avg;
/* This variable is used to store the current load average. */

static int ready_threads;
/* This variable holds the current number of "ready" threads used by the MLFQS
   scheduler for load average calculations. */

struct thread {
    int nice;
    /* This variable holds the thread's nice value used for the MLFQS
       scheduler. */

    int recent_cpu;
    /* This variable holds the thread's recent_cpu value used for the MLFQS
       scheduler. */
}

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   0   0  63  61  59   A
 4      4   0   0  62  61  59   A
 8      8   0   0  61  61  59   A
12     12   0   0  60  61  59   B
16     12   4   0  60  60  59   B
20     12   8   0  60  59  59   A
24     16   8   0  59  59  59   A
28     20   8   0  58  59  59   B
32     20  12   0  58  58  59   C
36     20  12   4  58  58  58   C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

Yes, I used the rule that the currently running thread should not be switched
if there is a thread at the same priority. This matches the behavior of my
scheduler.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

The amount of code in the interrupt context could potentially cause problems if
it takes too long to execute, for example, if too many threads are running for
their recent_cpu to be updated in a single tick.

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

My design could be improved by splitting the load_avg, recent_cpu, and priority
updates to separate functions for clarity. If I had extra time, I would improve
my implementation of fixed-point numbers to use a properly-defined type instead
of a renamed int.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

I wanted to implement fixed-point math in a reusable way that allowed for
simple code, so I implemented a module with a set of functions to manipulate
fixed-point numbers.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
