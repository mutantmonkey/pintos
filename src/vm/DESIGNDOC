                    +---------------------------+
                    |           CS 140          |
                    | PROJECT 3: VIRTUAL MEMORY |
                    |      DESIGN DOCUMENT      |
                    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

William Robinson billyrob@vt.edu
Andrew Shugarts rue92@vt.edu
James Schwinabart jschwina@vt.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

N/A

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

N/A

                        PAGE TABLE MANAGEMENT
                        =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In vm.h

//The frame table. Used to hold the frame table entries that are 
//currently in memory
struct list frame_table;
//Lock used to synchronize accesses to the frame table
struct lock frame_table_lock;

struct frame_table_entry
{
  //The thread that owns this frame
  struct thread* thread;
 
  //List elem used to place the frame entry in the frame table
  struct list_elem frame_table_elem;

  //Pointer to the frame's actual page as given by palloc_get_page
  void* frame_page;

  //The supplemental page entry that refers to this frame table entry
  struct sup_page_table_entry* page;
};


struct sup_page_table_entry
{
  //The position in the file where this entry's data begins
  off_t offset;

  //The number of bytes to be read from or written to the file
  uint32_t readbytes;

  //The number of bytes to be initialized to zero 
  uint32_t zerobytes;

  //Hash element used to place the entry into the supplemental 
  //page table
  struct hash_elem elem;
 
  //The virtual address corresponding to this entry
  uint8_t* addr;

  //The file that the entry is read from
  struct file* f;

  //The frame entry that represents the current physical location 
  //of the entry
  struct frame_table_entry* frame;
 
  //Bool used to tell if this data can be written back to file
  bool writable;
  
  //Where in the swap table the entry data is stored
  size_t swap_table_index;
  
  //True if the entry is in swap space, false if not
  bool swapped;
  
  //Set to true if the entry is in memory, false if not
  bool loaded;
};

In thread.h

//Hash table for the supplemental page table. Hash table for fast 
//accessed based off addresses.
struct hash sup_page_table;

//Synchronizes accesses to the supplemental page table hash.
struct lock hash_lock;

//Hash table used for quick address access of mmaped files
struct hash mmap_table;

//Lock that synchronizes accesses to the mmap_list and mmap_table
struct lock mmap_lock;

//Int that keeps track of the last mapid_t
int latest_mapid_t;

//List that stores the current mmaped files. Used for non-address based 
//accesses in munmap and exit.
struct list mmap_list;

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

When a page fault occurs, our code looks up the corresponding
supplemental page entry in the supplemental page table, implemented as
a hash for quick access, and if an entry exists for the faulted address
we allocate a frame for it. This calls vm_allocate, which calls 
allocate_frame to obtain a physical frame (and creates a frame table
entry) and then vm_allocate reads in the appropriate data (using
the file, offset, readbytes, and zerobytes values that are entered
when the entry is created) in a manner almost identical to the old
implementation of load_segment. Should allocate_frame's call to 
palloc_get_page return null, a frame is evicted via clock_evict
which finds the first non-accessed entry to evict, and evict_frame
which saves the frame to swap space and places a record of this in
the corresponding supplemental page entry. vm_allocate first checks
these values and if it finds that an entry's data is in swap it reads
the data back in from swap (making room via eviction) and then returns.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

No attempt was made at distinguishing between user and kernel 
accesses to aliased frames. Our thinking was that since this would
only affect our eviction choice and this choice wouldn't affect the
correctness of our code, only the performance, and that performance 
doesn't care if the access was through kernel or user code. Thus we
shouldn't discriminate between the two.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

Allocating a new frame starts in vm_allocate in page.c which calls 
allocate_frame in frame.c. This first calls palloc_get_page which
has its own internal synchronization. If both processes get frames
then a frame entry is created. The entry's data is filled in and 
then the entry is added to the frame table which is protected by
a lock. If one process doesn't get a frame then the eviction code
is entered which has it's own internal sychronization to avoid 
race conditions when accessing swap. Looking for a frame to evict
is protected by the same lock that protects the frame table 
previously. Careful attention was made to removing the entry from 
the frame and clearing the frame's pagedir entry before releasing 
this lock. As such there is no race condition that corrupts the 
state of the frame table as all accesses to the frame table are
protected by a lock. 

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

The virtual-to-physical mappings are acheived through pointers
in both the supplemental page entries (the entries used for 
virtual addressing) and frame table entries (the entries used
for physical addressing). Have a simple two way pointer design
involves little memory overhead, had no performance overhead
associated with a data structure access, and was a clean design
choice.

                       PAGING TO AND FROM DISK
                       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In swap.c

//This bitmap is used to represent the swap drive. If an entry is 
//set to true then that page in the swap drive is used.
struct bitmap *swap_space;

//The block device that physically stores the evicteed frames
struct block *swap_drive;

//Lock used to synchronize accesses to the swap_space bitmap
struct lock swap_lock;


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We find the first non-accessed frame and if all have been accessed
we choose the first frame in the frame table which is the frame that
was least recently added to the frame table.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

We remove the frame from the frame table, move the frame to swap if 
neccessary and clear Q's pagedir's entry for that frame. Thus if Q 
attempts to reference that frame again a page fault will occur and
our normal page fault handling will handle this request.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We check if the fault address is above the stack pointer or within 32
bits below the stack pointer and if so then we grow the stack. 

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

All accesses to our data structures are protected via locks. This
also includes certain accesses to the pagedir structure via 
pagedir_clear_page as the state of the pagedir structure effects
how and which of our data structures are accessed. During development
we found that we had a problem during eviction where we would remove
a frame from our frame table but wouldn't clear the page in pagedir
until after we released the frame table lock and this caused other 
processes to not fault on the address as they should and they would
then corrupt the data in a frame that was given the old frame's spot.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

By having each frame store a reference to it's own thread we were
able to avoid ever interferring with the wrong thread's frames. We
ensure that race conditions are avoided through the use of locks, 
as discussed in the above section.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

We do not have any explicit code to stop this case from happening. However
as soon as the swap file is being read in, the page will be listed as 
accessed. It will also be added to the back of the frame table and so
our eviction code will not evict this frame because it only can evict
accessed frames or if that fails, the first frame in the frame table.
There is no possibility of this in-progress frame being unaccessed or
being the first frame in the frame table (if the frame table was empty
at the time of this swap-in then an immediate second attempt to retrieve
a frame would be able to do so via palloc_get_frame and would not enter
the eviction code).

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We use page faults to bring in pages no matter from where they are
faulted from. This involves checking the intr_frame's esp and the 
relation of this value to the fault_addr.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We aimed for a high parallelism solution for this design difficulty by 
limiting our locks to correspond to our data structures, (the 
supplemental page table, frame table, swap table, memory-mapped list 
and table) and thus have explicit locks for each access to these data 
structures. Through careful ordering we believe that we have avoided 
deadlocks while allowing for high parallelism. We choose this as 
performance should always be a major concern and if time allows then
performance should override implementation difficulty to a degree. 

                         MEMORY MAPPED FILES
                         ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct mmap_table_entry
{
  //The position in the file where this entry's data begins
  off_t offset;

  //The number of bytes to be read from or written to the file
  uint32_t readbytes;

  //The number of bytes to be initialized to zero 
  uint32_t zerobytes;

  //Hash elem used to place the mmap entry into the mmap hash table
  struct hash_elem elem;

  //List elem used to place the mmap entry into the mmap list table
  struct list_elem listelem;

  //Pointer to the virtual address of this mmap file
  uint8_t* addr;

  //Pointer the file that backs this mmap file
  struct file* f;

  //Mapid_t given to the mmapped file.
  int mapid_t;
  
  //Pointer to the memory address of this mmap file
  void* page;
};

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Memory-mapped files are handled through a separate though very
similar system. During page faults we check both the supplemental
page table and the mmapped table (the hash table not the list).

We do not have the ability to evict mmapped pages
due to time restraints and this would be the first improvement
made to our system.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We use our get_sup_page_entry function to see if there is already 
an entry for an existing segment and fail the syscall if a segment
already exists.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We decided for debugging and testing purposes to keep the memory-mapped
code as separate as possible. This allowed us to be able to work on the
memory-mapped section in parallel with the rest of the paging system. 
It is also very helpful from a code-readability standpoint to have not 
combined the implementation of these two cases.

